package crawler;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.jsoup.nodes.Document;

import com.google.gson.Gson;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.skife.jdbi.v2.DBI;
import org.skife.jdbi.v2.Handle;
import util.Config;

public class Main {

    private static Gson gson = new Gson();

    private static final String SERIES_LIST_URL = "https://shahid.mbc.net/ar/series-browser/autoGeneratedContent/seriesBrowserGrid~browse~-param-.sort-latest.pageNumber-$1.html";
    private static final String GET_PLAYER_URL = "https://shahid.mbc.net/arContent/getPlayerContent-param-.id-$1.playList-true.type-player.html";
    private static final String SERIES_URL = "https://shahid.mbc.net/ar/series/$1";
    private static final String BASE_PAGING_URL = "https://shahid.mbc.net/ar/series/autoGeneratedContent/relatedEpisodeListingDynamic~listing~-param-.ptype-series.seriesId-$1.showSection-$2.sort-number:DESC.pageNumber-$3.html";

    public static void main(String[] args) throws Exception {
        startCrawler();
    }

    private static void startCrawler() throws Exception{

        DBI dbi = new DBI(Config.JDBC_URL, Config.JDBC_USERNAME, Config.JDBC_PASSWORD);
        Handle handle = dbi.open();

        skipSSL();

        List<Series> seriesList = getSeriesList();

        for (Series series : seriesList){
            System.out.println(series);

            if (DbHelper.seriesNotExists(handle, series.sid)){

                series.tag.forEach(t -> DbHelper.insertTagIfNotExists(handle, t));
                DbHelper.insertSeries(handle, series);
                DbHelper.linkSeriesWithTags(handle, series.sid, series.tag);

                List<Episode> listOfEpisodes = getEpisodesList(series.sid);

                for (Episode episode : listOfEpisodes){
                    DbHelper.insertEpisode(handle, series.sid, episode);
                }
            }else{
                System.out.println("series " + series.sid + " already exists.");
            }
        }
        handle.close();
    }

    private static List<Series> getSeriesList() throws Exception {
        List<Series> idList = new ArrayList<>();

        for (int i = 0; i < Config.TOTAL_PAGES; i ++){
            List<Series> internalList = JSoupHelper.connectAndGetDoc(SERIES_LIST_URL.replace("$1", i + ""))
                    .select("body > div")
                    .stream()
                    .map(Main::fromElement)
                    .collect(Collectors.toList());
            idList.addAll(internalList);
        }
        return idList;
    }

    private static List<Episode> getEpisodesList(String seriesId) throws Exception {
        System.out.println("start processing series: " + seriesId);

        List<Episode> episodesList = new ArrayList<>();

        List<String> toC = getToC(seriesId);

        for (String aToC : toC) {
            String body = JSoupHelper.connectAndGetString(GET_PLAYER_URL.replace("$1", aToC));

            Episode episode = new Episode();
            episode.sid = aToC;
            Resp resp = gson.fromJson(body, Resp.class);
            if (resp.data.url == null){
                System.err.println(body);
            }
            episode.videoUrl = resp.data.url;
            episode.durationSeconds = resp.data.durationSeconds;
            episodesList.add(episode);
        }
        System.out.println("got episode list for series: " + seriesId + ", size: " + episodesList.size());
        return episodesList;
    }

    private static List<String> getToC(String seriesId) throws Exception {

        Document doc = JSoupHelper.connectAndGetDoc(SERIES_URL.replace("$1", seriesId));

        String sectionText = doc.select("#main > div > div > div > div.pageing > ul > li.arrowlft > a").get(0).outerHtml();
        String sectionId = sectionText.substring(sectionText.indexOf("showSection-") + 12, sectionText.indexOf("' + '.sort-' + "));

        String pagingUrl = BASE_PAGING_URL.replace("$1", seriesId).replace("$2", sectionId);

        List<String> idList = new ArrayList<>();

        for (int i = 0; i < 2; i++) {
            idList.addAll(JSoupHelper.connectAndGetDoc(pagingUrl.replace("$3", i + "")).select("body > div > .subitem").eachAttr("id"));
        }
        Collections.reverse(idList);
        System.out.println("got toc for series: " + seriesId + ", " + idList);
        return idList;
    }

    private static Series fromElement(Element element){
        Series series = new Series();

        Elements divs = element.children();
        Element firstDiv = divs.get(1);
        Element secondDiv = divs.get(2);

        series.sid = secondDiv.attr("id");
        series.title = element.select(".title > a").text();
        series.posterUrl = element.select(".photo > img").attr("src");

        Category[] categories = gson.fromJson(firstDiv.attr("categories"), Category[].class);
        series.tag = Stream.of(categories).map(c -> c.name).collect(Collectors.toList());

        return series;
    }

    private static class Resp {
        private Data data;
    }

    private static class Data {
        private String url;
        private long durationSeconds;
    }

    static class Series {
        String sid;
        String title;
        String posterUrl;
        List<String> tag;

        @Override
        public String toString() {
            return "Series{" +
                    "sid='" + sid + '\'' +
                    ", title='" + title + '\'' +
                    ", posterUrl='" + posterUrl + '\'' +
                    ", tag=" + tag +
                    '}';
        }
    }

    static class Episode {
        String sid;
        String videoUrl;
        long durationSeconds;

        @Override
        public String toString() {
            return "Episode{" +
                    "sid='" + sid + '\'' +
                    ", videoUrl='" + videoUrl + '\'' +
                    ", durationSeconds=" + durationSeconds +
                    '}';
        }
    }

    private static class Category{
        private String name;
    }

    private static void skipSSL() {
        TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }

            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }
        } };

        // Install the all-trusting trust manager
        try {
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        } catch (Exception e) {
        }
    }
}